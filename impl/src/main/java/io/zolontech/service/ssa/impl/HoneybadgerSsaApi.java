//
//  This file was auto-generated by Macaw tools 0.10.0-SNAPSHOT version built on Wed, 4 Jul 2018 10:55:39 +0530 
//
package io.zolontech.service.ssa.impl;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import io.zolontech.service.ssa.Address;
import io.zolontech.service.ssa.DomainEntityInstantiator;
import io.zolontech.service.ssa.Office;
import io.zolontech.service.ssa.OfficeType;
import io.zolontech.service.ssa.OpenHours;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class HoneybadgerSsaApi implements com.cfx.service.api.Service, io.zolontech.service.ssa.HoneybadgerSsaApi {
    @Override
    public void initialize(com.cfx.service.api.config.Configuration config) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public void start(com.cfx.service.api.StartContext startContext) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public void stop(com.cfx.service.api.StopContext stopContext) throws com.cfx.service.api.ServiceException {
    }

    @Override
    public java.util.List<io.zolontech.service.ssa.Office> getFieldOffices(final String zipCode) {
        if (zipCode == null || zipCode.trim().isEmpty()) {
            throw new IllegalArgumentException("Zip code cannot be null or empty string");
        }
        final FieldOfficeAccessor fieldOfficeAccessor = new FieldOfficeAccessor();
        final JsonObject result = fieldOfficeAccessor.findForZipCodes(Collections.singleton(zipCode));
        if (!result.has("features")) {
            return Collections.emptyList();
        }
        final JsonArray features = result.get("features").getAsJsonArray();
        if (features == null || features.size() == 0) {
            return Collections.emptyList();
        }
        final List<Office> offices = new ArrayList<>();
        for (int i = 0; i < features.size(); i++) {
            final JsonObject feature = features.get(i).getAsJsonObject();
            final Office office = processOffice(feature);
            office.setType(OfficeType.OFFICE);
            offices.add(office);
        }
        return offices;
    }

    @Override
    public Office getOffice(final String s) {
        return null;
    }

    //@Override
    public java.util.List<io.zolontech.service.ssa.Office> getResidenceStations(final String zipCode) {
        if (zipCode == null || zipCode.trim().isEmpty()) {
            throw new IllegalArgumentException("Zip code cannot be null or empty string");
        }
        final FieldOfficeAccessor fieldOfficeAccessor = new FieldOfficeAccessor();
        final JsonObject result = fieldOfficeAccessor.findForZipCodes(Collections.singleton(zipCode));
        if (!result.has("features")) {
            return Collections.emptyList();
        }
        final JsonArray features = result.get("features").getAsJsonArray();
        if (features == null || features.size() == 0) {
            return Collections.emptyList();
        }
        final List<Office> offices = new ArrayList<>();
        for (int i = 0; i < features.size(); i++) {
            final JsonObject feature = features.get(i).getAsJsonObject();
            final Office office = processOffice(feature);
            office.setType(OfficeType.RESIDENCE_STATION);
            offices.add(office);
        }
        return offices;
    }

    private Office processOffice(final JsonObject officeJson) {
        if (officeJson == null) {
            return null;
        }
        System.out.println("Processing office " + officeJson);
        final JsonObject geometryJson = officeJson.getAsJsonObject("geometry");
        final JsonObject officeAttrs = officeJson.getAsJsonObject("attributes");
        final Office office = DomainEntityInstantiator.getInstance().newInstance(Office.class);
        final Address address = DomainEntityInstantiator.getInstance().newInstance(Address.class);
        address.setLongitude(Double.valueOf(geometryJson.get("x").getAsString()));
        address.setLatitude(Double.valueOf(geometryJson.get("y").getAsString()));
        if (officeAttrs.has("AddressLine1")) {
            address.setLine1(officeAttrs.get("AddressLine1").getAsString());
        }
        if (officeAttrs.has("AddressLine2")) {
            address.setLine2(officeAttrs.get("AddressLine2").getAsString());
        }
        if (officeAttrs.has("AddressLine3")) {
            address.setLine3(officeAttrs.get("AddressLine3").getAsString());
        }
        if (officeAttrs.has("City")) {
            address.setCity(officeAttrs.get("City").getAsString());
        }
        if (officeAttrs.has("State")) {
            address.setState(officeAttrs.get("State").getAsString());
        }
        if (officeAttrs.has("Zip5_1")) {
            address.setZip(officeAttrs.get("Zip5_1").getAsString());
        }
        office.setAddress(address);
        final OpenHours openHours = processOpenHours(officeAttrs);
        office.setOpenhours(openHours);
        return office;
    }

    private OpenHours processOpenHours(final JsonObject officeAttrs) {
        if (officeAttrs == null) {
            return null;
        }
        final OpenHours openHours = DomainEntityInstantiator.getInstance().newInstance(OpenHours.class);
        for (final Map.Entry<String, JsonElement> entry : officeAttrs.entrySet()) {
            switch (entry.getKey()) {
                case "MON_OPEN_TM": {
                    openHours.setMonOpenTm(entry.getValue().getAsString());
                    break;
                }
                case "MON_CLOS_TM": {
                    openHours.setMonClosTm(entry.getValue().getAsString());
                    break;
                }
                case "TUE_OPEN_TM": {
                    openHours.setTueOpenTm(entry.getValue().getAsString());
                    break;
                }
                case "TUE_CLOS_TM": {
                    openHours.setTueClosTm(entry.getValue().getAsString());
                    break;
                }
                case "WED_OPEN_TM": {
                    openHours.setWedOpenTm(entry.getValue().getAsString());
                    break;
                }
                case "WED_CLOS_TM": {
                    openHours.setWedClosTm(entry.getValue().getAsString());
                    break;
                }
                case "THU_OPEN_TM": {
                    openHours.setThuOpenTm(entry.getValue().getAsString());
                    break;
                }
                case "THU_CLOS_TM": {
                    openHours.setThuClosTm(entry.getValue().getAsString());
                    break;
                }
                case "FRI_OPEN_TM": {
                    openHours.setFriOpenTm(entry.getValue().getAsString());
                    break;
                }
                case "FRI_CLOS_TM": {
                    openHours.setFriClosTm(entry.getValue().getAsString());
                    break;
                }
            }
        }
        return openHours;
    }
}
